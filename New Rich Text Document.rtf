{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red0\green176\blue80;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 Wednesday, May 13, 2020\par
\cf1\b\fs28 Kubernetes setup in AWS using KOPS -\cf0\b0\fs22\par
Kubernetes Cluster setup in AWS using KOPS\par
\par
1) Create Ubuntu EC2 instance\par
\par
2) Install AWSCLI\par
\par
 sudo apt update -y\par
 sudo curl {{\field{\*\fldinst{HYPERLINK https://s3.amazonaws.com/aws-cli/awscli-bundle.zip }}{\fldrslt{https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\ul0\cf0}}}}\f0\fs22  -o awscli-bundle.zip\par
 sudo apt install unzip python -y\par
 sudo unzip awscli-bundle.zip\par
 #sudo apt-get install unzip - if you dont have unzip in your system\par
 sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\par
 \par
 \par
3) Install kops on ubuntu instance:\par
\par
     #Install wget if not installed\par
     sudo apt install wget -y\par
     sudo wget {{\field{\*\fldinst{HYPERLINK https://github.com/kubernetes/kops/releases/download/v1.16.1/kops-linux-amd64 }}{\fldrslt{https://github.com/kubernetes/kops/releases/download/v1.16.1/kops-linux-amd64\ul0\cf0}}}}\f0\fs22\par
     sudo chmod +x kops-linux-amd64\par
     sudo mv kops-linux-amd64 /usr/local/bin/kops\par
 \par
4) Install kubectl\par
\par
 sudo curl -LO {{\field{\*\fldinst{HYPERLINK https://storage.googleapis.com/kubernetes-release/release/$(curl }}{\fldrslt{https://storage.googleapis.com/kubernetes-release/release/$(curl\ul0\cf0}}}}\f0\fs22  -s {{\field{\*\fldinst{HYPERLINK https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl }}{\fldrslt{https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\ul0\cf0}}}}\f0\fs22\par
\par
 sudo chmod +x ./kubectl\par
 sudo mv ./kubectl /usr/local/bin/kubectl\par
\par
5) Create an IAM role from Consloe or CLI with below Policies.\par
\par
    AmazonEC2FullAccess\par
    AmazonS3FullAccess\par
    IAMFullAccess\par
    AmazonVPCFullAccess\par
\par
\par
Then Attach IAM role to ubuntu server from Console Select KOPS Server --> Actions --> Instance Settings --> Attach/Replace IAM Role --> Select the role which\par
You Created. --> Save.\par
\par
\par
\par
6) create an S3 bucket Execute below commond in KOPS Server use unique bucket name if you get bucket name exists error.\par
\par
    aws s3 mb s3://<bucketname>\par
   \par
    ex:\par
    # S3 bucket name should be unique across AWS\par
    aws s3 mb s3://balajimtbatch18.k8s.local\par
    \par
    Expose environment variable:\par
\par
    # Add env variables in bashrc\par
    vi .bashrc\par
   \par
    # Give Unique Name And S3 Bucket which you created.\par
    export NAME=balajimtbatch18.k8s.local\par
    export KOPS_STATE_STORE=s3://balajimtbatch18.k8s.local\par
 \par
    source .bashrc\par
   \par
7) Create sshkeys before creating cluster\par
\par
    ssh-keygen\par
 \par
\par
8)Create kubernetes cluster definitions on S3 bucket\par
\par
    kops create cluster --zones ap-south-1a --networking weave --master-size t2.medium --master-count 1 --node-size t2.micro --node-count=2 $\{NAME\}\par
   \par
   \par
    kops create secret --name $\{NAME\} sshpublickey admin -i ~/.ssh/id_rsa.pub\par
\par
9) Create kubernetes cluster\par
\par
     kops update cluster $\{NAME\} --yes\par
\par
10) Validate your cluster(KOPS will take some time to create cluster ,Execute below commond after 3 or 4 mins)\par
\par
       kops validate cluster\par
 \par
11) To list nodes\par
\par
      kubectl get nodes\par
 \par
 \par
 \par
To Delete Cluster\par
\par
   kops delete cluster --name=$\{NAME\} --state=$\{KOPS_STATE_STORE\} --yes \par
  \par
====================================================================================================\par
\par
\par
IF you wan to SSH to Kubernates Master or Nodes Created by KOPS. You can SSH From KOPS_Server\par
\par
ssh  admin@<IPOrDNS>\par
it above command  is not working\par
then execute\par
ssh -i ~/.ssh/id_rsa admin@<IPOrDNS>\par
 \par
\cf1\b\fs28 Mongo DB commands - \par
\cf0\b0\fs22\par
mongod --version: It will gives the MongoDB Server version.\par
\par
mongo -version: It will gives the MongoDB Shell version.\par
Mongo Shell is the command line client.\par
\par
To login into mongo db just type mongo command.\par
\par
\par
db.createCollection("students"): It will create a collection called students.\par
db.students.insertOne( \{\par
    name: "Mithun",\par
    age: 07,\par
    status: "A"\par
 \} )\par
\par
\par
\par
\cf1\b\fs28 Tomcat Installation - Linux - Tomcat Installation\cf0\b0\fs22\par
#Login as a root user\par
sudo su -\par
\par
yum install wget unzip -y\par
\par
cd /opt\par
wget {{\field{\*\fldinst{HYPERLINK https://downloads.apache.org/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.zip }}{\fldrslt{https://downloads.apache.org/tomcat/tomcat-9/v9.0.34/bin/apache-tomcat-9.0.34.zip\ul0\cf0}}}}\f0\fs22\par
unzip apache-tomcat-9.0.34.zip\par
cd /opt/apache-tomcat-9.0.34/bin\par
chmod u+x *.sh\par
#sh /opt/apache-tomcat-9.0.34/bin/startup.sh\par
ln -s /opt/apache-tomcat-9.0.34/bin/startup.sh /usr/bin/startTomcat\par
ln -s /opt/apache-tomcat-9.0.34/bin/shutdown.sh /usr/bin/stopTomcat\par
#ps -fax | grep tomcat\par
#netstat -tunlap\par
#vi /opt/apache-tomcat-9.0.31/webapps/manager/META-INF/context.xml\par
#Comment the below lines\par
#<!-- <Valve className="org.apache.catalina.valves.RemoteAddrValve"\par
# allow="127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1" /> -->\par
startTomcat\par
#stopTomcat\par
\par
Troubleshooting\par
--------------------\par
\par
tomcat server is not starting?\par
\par
a)Check the catalina.out file which is available  in conf dir.\par
b)check java is installed or not using java -version command.\par
\par
Unable to access Tomcat server URL in browser?\par
\par
a)make sure port 8080 is opened in security groups - AWS ec2 instance.\par
\par
\par
\cf1\b\fs28 *****DevOps Videos URLs - Mithun Technologies ****\cf0\b0\fs22\par
Linux Videos\par
-------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw43vhoBxQl90UaMfMqEY6FwN }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw43vhoBxQl90UaMfMqEY6FwN\ul0\cf0}}}}\f0\fs22\par
\par
Shell Script Videos\par
-------------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw42wrkxcsqGyi-5-FqRIgKdR }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw42wrkxcsqGyi-5-FqRIgKdR\ul0\cf0}}}}\f0\fs22\par
\par
Gi and GitHub Videos\par
--------------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw41G__vPuebVkj9hF1o2fH6z }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw41G__vPuebVkj9hF1o2fH6z\ul0\cf0}}}}\f0\fs22\par
\par
Java Videos\par
-----------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw400e4VSlfONdXfqkoJifCjd }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw400e4VSlfONdXfqkoJifCjd\ul0\cf0}}}}\f0\fs22\par
\par
Maven Videos\par
------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw41kFVAT9tEiet60xdkYKJUT }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw41kFVAT9tEiet60xdkYKJUT\ul0\cf0}}}}\f0\fs22\par
\par
Tomcat Videos\par
-------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw43d1kbZiCbKB2v35nvs4DIr }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw43d1kbZiCbKB2v35nvs4DIr\ul0\cf0}}}}\f0\fs22\par
\par
\par
SonarQube Server Videos\par
-----------------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw43iSpp9B-sOtHuBQInkmnYA }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw43iSpp9B-sOtHuBQInkmnYA\ul0\cf0}}}}\f0\fs22\par
\par
Nexus Videos\par
------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw42HGb3_KjqnJFi6HBD7Kxea }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw42HGb3_KjqnJFi6HBD7Kxea\ul0\cf0}}}}\f0\fs22\par
\par
\par
Jenkins Videos\par
--------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw411cVNkBki1ZGjIM1X01h4D }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw411cVNkBki1ZGjIM1X01h4D\ul0\cf0}}}}\f0\fs22\par
\par
\par
Docker and Docker Swarm Videos\par
-------------------------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw416lg-Pzaks4nSL_6L_fEjc }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw416lg-Pzaks4nSL_6L_fEjc\ul0\cf0}}}}\f0\fs22\par
\par
\par
Kubernetes Videos\par
-----------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw411cVNkBki1ZGjIM1X01h4D }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw411cVNkBki1ZGjIM1X01h4D\ul0\cf0}}}}\f0\fs22\par
\par
\par
Ansible Videos\par
--------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw43Gd2hClMPx7d0I6YaPRS0O }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw43Gd2hClMPx7d0I6YaPRS0O\ul0\cf0}}}}\f0\fs22\par
\par
\par
Terraform Videos\par
----------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw42eV5Kumvqh8pZGpmFvcXfZ }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw42eV5Kumvqh8pZGpmFvcXfZ\ul0\cf0}}}}\f0\fs22\par
\par
Packer Videos\par
-------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw41kmkmr13XflG5edNoUGZBo }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw41kmkmr13XflG5edNoUGZBo\ul0\cf0}}}}\f0\fs22\par
\par
\par
Mongo DB Videos\par
---------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw40MEt_qD3itOxCcs_YdzL0H }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw40MEt_qD3itOxCcs_YdzL0H\ul0\cf0}}}}\f0\fs22\par
\par
\par
Nagios Videos\par
-------------\par
{{\field{\*\fldinst{HYPERLINK https://www.youtube.com/playlist?list=PLUltco2RCw42GG7B27-1m5ku2WsPS8hhn }}{\fldrslt{https://www.youtube.com/playlist?list=PLUltco2RCw42GG7B27-1m5ku2WsPS8hhn\ul0\cf0}}}}\f0\fs22\par
\par
\par
\cf1\b\fs28 EC2 Instance Creation by using Terraform \b0 - \cf0\fs22\par
provider "aws" \{\par
  region = "ap-south-1"\par
  access_key = "AIA4UQE3BUQ6GQ3BAEO"\par
  secret_key = "5LAzj2tYFxf1NNvmvz0Z1UASoEzDZHlc6R5wHF"\par
\}\par
\par
resource "aws_instance" "AWSServer" \{\par
  ami = "ami-0a74bfeb190bd404f"\par
  instance_type = "t2.micro"\par
  key_name = "mithuntechnologies"\par
  security_groups = ["launch-wizard-1"]\par
  tags = \{\par
   Name = "Terrafrom Server"\par
  \}\par
\}\par
\cf1\b\fs28 Vault Installation - Linux Server- \par
\cf0\fs22 Packer Installation \par
\b0 #Login as a root user in ec2 instance\par
sudo su -\par
\par
#You will need to upgrade your system and packages\par
yum update -y\par
\par
#Install wget and unzip packages\par
yum install wget unzip vim -y\par
\par
\par
#Go to /opt dir\par
cd /opt\par
\par
#Download the Vault software.\par
{{\field{\*\fldinst{HYPERLINK https://www.vaultproject.io/downloads/ }}{\fldrslt{https://www.vaultproject.io/downloads/\ul0\cf0}}}}\f0\fs22\par
\par
wget {{\field{\*\fldinst{HYPERLINK https://releases.hashicorp.com/vault/1.3.2/vault_1.3.2_linux_amd64.zip }}{\fldrslt{https://releases.hashicorp.com/vault/1.3.2/vault_1.3.2_linux_amd64.zip\ul0\cf0}}}}\f0\fs22\par
\par
#Extract the terraform software.\par
unzip vault_1.3.2_linux_amd64.zip -d /usr/local/bin/\par
\par
#Check the version\par
vault -v (OR) vault --version\par
\par
#Help\par
vault  -help\par
 \par
\cf1\b\fs28 Java Installation - Linux Java Installation \par
\cf0\b0\fs22 ##Login as a root user\par
sudo su -\par
\par
##Change dir to /opt \par
cd /opt\par
yum install wget -y\par
wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" {{\field{\*\fldinst{HYPERLINK http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm }}{\fldrslt{http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm\ul0\cf0}}}}\f0\fs22\par
yum install jdk-8u131-linux-x64.rpm -y\par
\par
java -version\par
\par
\cf1\b\fs28 Packer Installation - Linux Server- Packer Installation \par
\cf0\b0\fs22 #Login as a root user in ec2 instance\par
sudo su -\par
\par
#You will need to upgrade your system and packages\par
yum update -y\par
\par
#Install wget and unzip packages\par
yum install wget unzip vim -y\par
\par
\par
#Go to /opt dir\par
cd /opt\par
\par
#Download the Packer software.\par
{{\field{\*\fldinst{HYPERLINK https://packer.io/downloads.html }}{\fldrslt{https://packer.io/downloads.html\ul0\cf0}}}}\f0\fs22  \par
\par
wget  {{\field{\*\fldinst{HYPERLINK https://releases.hashicorp.com/packer/1.5.4/packer_1.5.4_linux_amd64.zip }}{\fldrslt{https://releases.hashicorp.com/packer/1.5.4/packer_1.5.4_linux_amd64.zip\ul0\cf0}}}}\f0\fs22\par
\par
#Extract the terraform software.\par
unzip packer_1.5.4_linux_amd64.zip -d /usr/local/bin/\par
\par
#Check the version\par
packer -v (OR) packer --version\par
\par
#Help\par
packer -help\par
\cf1\b\fs28 Steps to create password less ssh between two AWS EC2 instances -\cf0\b0\fs22\par
Steps to create password less ssh between two AWS EC2 instances  \par
Steps to create password less ssh between two AWS EC2 instances\par
\par
Pre Requisites\par
\par
  2 Linux Servers\par
     Redhat Linux Server - A\par
     IP:       13.233.128.180\par
     User:     ec2-user\par
     Password: ********\par
   \par
     Redhat Linux Server - B\par
     IP:       13.127.64.6\par
     User:     ec2-user\par
     Password: ********\par
\par
Step  1\par
\par
Generate the ssh key using below command in Redhat Linux Server - A\par
\par
ssh-keygey\par
~/.ssh/\par
id_rsa\par
id_rsa.pub\par
\par
Step 2\par
Copy the public key from Redhat Linux Server - A to Redhat Linux Server - B as follows.\par
\par
ssh-copy-id ec-user@Redhat Linux Server - B HostName/IP Address\par
\par
\par
Step 3\par
Test the configurations as follows.\par
\par
ssh ec2-user@Redhat Linux Server - B HostName/IP Address\par
\par
It should not ask the password and It will successfully connected to Redhat Linux Server - B from Redhat Linux Server - A\par
\par
\par
\par
\par
\cf1\b\fs28 Terraform Installation - Linux Server- \cf0\b0\fs22 Terraform Installation \par
#Login as a root user in ec2 instance\par
sudo su -\par
#You will need to upgrade your system and packages\par
yum update -y\par
\par
#Install wget and unzip packages\par
yum install wget unzip vim -y\par
\par
#Download the terraform software.\par
#Use {{\field{\*\fldinst{HYPERLINK https://www.terraform.io/downloads.html }}{\fldrslt{https://www.terraform.io/downloads.html\ul0\cf0}}}}\f0\fs22  to download the terraform software.\par
\par
wget {{\field{\*\fldinst{HYPERLINK https://releases.hashicorp.com/terraform/0.12.21/terraform_0.12.21_linux_amd64.zip }}{\fldrslt{https://releases.hashicorp.com/terraform/0.12.21/terraform_0.12.21_linux_amd64.zip\ul0\cf0}}}}\f0\fs22\par
\par
#Extract the terraform software.\par
unzip terraform_0.12.21_linux_amd64.zip -d /usr/local/bin/\par
\par
#Check the version\par
terraform -v (OR) terraform version\par
\par
#Help\par
terraform -help\par
\cf1\b\fs28 Mongo DB Installation - Linux Mongo DB Installation \cf0\b0\fs22\par
#Login as a root user\par
sudo su -\par
\par
#Configure the package management system (yum).\par
#Create a file /etc/yum.repos.d/mongodb-org-4.2.repo\par
\par
vi /etc/yum.repos.d/mongodb-enterprise-4.2.repo\par
\par
#add below lines in /etc/yum.repos.d/mongodb-org-4.2.repo file\par
\par
[mongodb-enterprise-4.2]\par
name=MongoDB Enterprise Repository\par
baseurl={{\field{\*\fldinst{HYPERLINK https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/4.2/$basearch/ }}{\fldrslt{https://repo.mongodb.com/yum/redhat/$releasever/mongodb-enterprise/4.2/$basearch/\ul0\cf0}}}}\f0\fs22\par
gpgcheck=1\par
enabled=1\par
gpgkey={{\field{\*\fldinst{HYPERLINK https://www.mongodb.org/static/pgp/server-4.2.asc }}{\fldrslt{https://www.mongodb.org/static/pgp/server-4.2.asc\ul0\cf0}}}}\f0\fs22\par
\par
#Install the mongodb\par
yum install -y mongodb-enterprise\par
\par
#Enable the mongod service\par
systemctl enable mongod\par
#Start  the mongod service\par
systemctl start mongod\par
#Check the mongo db version\par
mongo --version\par
\par
#Connect to mongo db\par
mongo\par
#Create a user\par
\par
use admin\par
 \par
db.createUser(\par
  \{\par
    user: "mithuntechnologies",\par
    pwd: "passw0rd",\par
    roles: [ \{ role: "userAdminAnyDatabase", db: "admin" \} ]\par
  \}\par
)\par
\par
#Enable authentication\par
\par
vi /etc/mongod.conf\par
\par
security:\par
    authorization: "enabled"\par
   \par
#Restart the mongod service as follows.\par
\par
service mongod restart\par
\par
# Connect to Mongo DB from any client\par
mongo mongod:IPAddress:27017\par
\cf1\b\fs28 Install Git in AWS - EC2 Instance - ##Login as a root user\par
\cf0\b0\fs22 sudo su -\par
##Change dir to /opt\par
cd /opt\par
##The below command will download and install all required development libraries to your system.\par
\par
yum groupinstall "Development Tools" -y\par
\par
yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel curl-devel -y\par
yum install wget tar -y\par
\par
##Open below URL and select the specific version and right click on that and click on Copy Link ##Address, then execute the wget command.\par
##https://github.com/git/git/releases\par
\par
wget {{\field{\*\fldinst{HYPERLINK https://github.com/git/git/archive/v2.18.0.tar.gz }}{\fldrslt{https://github.com/git/git/archive/v2.18.0.tar.gz\ul0\cf0}}}}\f0\fs22  -O git-bash.tar.gz\par
tar -zxf git-bash.tar.gz\par
\par
cd git-2.18.0\par
make configure\par
./configure --prefix=/usr/local\par
##make install command will copy the built program, and its libraries and documentation, to the correct locations.\par
make install\par
\par
git --version\par
\par
git config --global user.name "Mithun Technologies"\par
git config --global user.email "devopstrainingblr@gmail.com"\par
git config --list\par
\par
\par
\cf1\b\fs28 Install Apache HTTP Server in Linux Redhat Server - Install Apache HTTP Server Installation \par
\cf0\b0\fs22  Login as root user and execute the below command for install http server.\par
\par
yum install httpd -y\par
\par
Enable the service as follows.\par
\par
systemctl enable httpd.service\par
\par
Start the HTTP server as follows.\par
\par
systemctl start httpd.service\par
Important Points\par
 httpd.conf file is the configuration file for Apache HTTP server, which is available in /etc/httpd/conf directory.\par
\cf1\b\fs32 Install Docker in Ubuntu Server  \par
\cf0\b0\fs22 Method-1\par
=======\par
\par
Step 1: Update all Software Repositories using below command.\par
\par
#apt-get update\par
\par
Step 2: Install a Docker using below command\par
\par
#apt install docker.io -y\par
\par
Step 3: Enable and start the docker service as follows.\par
\par
#systemctl enable docker\par
#systemctl start docker\par
\par
\par
Step 4: Check the  docker version\par
\par
#docker --version\par
\par
\par
To Un Install a docker\par
----------------------\par
Use below command to un-install docker\par
#apt-get remove docker docker-engine docker.io -y\par
----------------------------------------------------------------------------------------------------------------------------\par
Method -2\par
========\par
Step 1: Update all Software Repositories using below command.\par
#apt-get update\par
\par
\par
\par
Step 2: Install Docker using below command\par
#curl -fsSL get.docker.com | /bin/bash\par
\par
\par
\par
\par
Step 3: Check all the versions.\par
#apt-cache madison docker-ce\par
\par
\par
Step 4: If we want to install the specific version use the below command.\par
apt-get install docker-ce=<VERSION>\par
\par
Step 5: If you would like to use Docker as a non-root user, you should now consider\par
adding your user to the "docker" group with something like:\par
\par
#usermod -aG docker your-user\par
\cf1\b\fs32 Jenkins Docker Swarm Integration - \cf0\b0\fs22\par
Jenkins Docker Swarm Integration\par
=========================\par
\par
1) CI/CD Pipeline Scrit to build and deploy single service in docker swarm\par
\par
\par
2) CI/CD Pipeline Scrit to build and deploy multiple services using docker stack(Compose File) in docker swarm\par
\par
\par
Pre Requisite:\par
==========\par
\par
1) Docker Swarm Cluster\par
  \par
   {{\field{\*\fldinst{HYPERLINK https://www.youtube.com/watch?v=cuNW5Qwd-D4 }}{\fldrslt{https://www.youtube.com/watch?v=cuNW5Qwd-D4\ul0\cf0}}}}\f0\fs22\par
  \par
2)  Setup CI/CD (Jenkins) Server   \par
\par
=========Install Java, Jenkins, Docker in Ubuntu==============\par
\par
sudo apt update -y\par
\par
sudo apt install openjdk-8-jdk -y\par
\par
wget -q -O - {{\field{\*\fldinst{HYPERLINK https://pkg.jenkins.io/debian/jenkins-ci.org.key }}{\fldrslt{https://pkg.jenkins.io/debian/jenkins-ci.org.key\ul0\cf0}}}}\f0\fs22  | sudo apt-key add -\par
sudo sh -c 'echo deb <{{\field{\*\fldinst{HYPERLINK "http://pkg.jenkins.io/debian-stable binary/"}}{\fldrslt{http://pkg.jenkins.io/debian-stable binary/\ul0\cf0}}}}\f0\fs22 > > /etc/apt/sources.list.d/jenkins.list'\par
sudo apt-get update -y\par
sudo apt-get install jenkins -y\par
\par
sudo systemctl status jenkins\par
\par
sudo curl -fsSL get.docker.com | /bin/bash\par
\par
# Add jenkins user to docker group\par
sudo usermod -aG docker jenkins\par
# Restart jenkins to reflect docker permisions\par
sudo systemctl restart jenkins\par
\par
# Use below commands if you want to switch to jenkins user.\par
sudo -i -u jenkins\par
sudo su -s /bin/bash jenkins\par
\par
##Plugins Used\par
sshAgent\par
\par
\cf1\b\fs32 Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers - \cf0\b0\fs22\par
Agenda: Kubernetes Setup Using Kubeadm In AWS EC2 Ubuntu Servers\par
=======================================================\par
\par
Prerequisite:\par
==========\par
\par
3 - Ubuntu Serves\par
\par
1 - Manager  (4GB RAM , 2 Core) t2.medium\par
\par
2 - Workers  (1 GB, 1 Core)     t2.micro\par
\par
\par
Note: Open Required Ports In AWS Security Groups. For now we will open All trafic.\par
\par
==========COMMON FOR MASTER & SLAVES START ====\par
\par
# First, login as \lquote root\rquote  user because the following set of commands need to be executed with \lquote sudo\rquote  permissions.\par
\par
sudo su -\par
\par
# Install Required packages and apt keys.\par
\par
apt-get update -y\par
apt-get install -y apt-transport-https\par
curl -s {{\field{\*\fldinst{HYPERLINK https://packages.cloud.google.com/apt/doc/apt-key.gpg }}{\fldrslt{https://packages.cloud.google.com/apt/doc/apt-key.gpg\ul0\cf0}}}}\f0\fs22  | apt-key add -\par
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\par
deb {{\field{\*\fldinst{HYPERLINK https://apt.kubernetes.io/ }}{\fldrslt{https://apt.kubernetes.io/\ul0\cf0}}}}\f0\fs22  kubernetes-xenial main\par
EOF\par
apt-get update -y\par
\par
\par
\par
#Turn Off Swap Space\par
\par
swapoff -a\par
sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\par
\par
# Install And Enable Docker\par
\par
apt install docker.io -y\par
usermod -aG docker ubuntu\par
systemctl restart docker\par
systemctl enable docker.service\par
#Install kubeadm, Kubelet And Kubectl\par
\par
apt-get install -y kubelet kubeadm kubectl kubernetes-cni\par
\par
# Enable and start kubelet service\par
\par
systemctl daemon-reload\par
systemctl start kubelet\par
systemctl enable kubelet.service\par
\par
==========COMMON FOR MASTER & SLAVES END=====\par
\par
\par
\par
===========In Master Node Start====================\par
# Steps Only For Kubernetes Master\par
\par
# Switch to the root user.\par
\par
sudo su -\par
\par
# Initialize Kubernates master by executing below commond.\par
\par
kubeadm init\par
\par
#exit root user & exeucte as normal user\par
\par
exit\par
\par
mkdir -p $HOME/.kube\par
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\par
sudo chown $(id -u):$(id -g) $HOME/.kube/config\par
\par
\par
# To verify, if kubectl is working or not, run the following command.\par
\par
kubectl get pods -o wide --all-namespaces\par
\par
#You will notice from the previous command, that all the pods are running except one: \lquote kube-dns\rquote . For resolving this we will install a # pod network. To install the weave pod network, run the following command:\par
\par
kubectl apply -f "<{{\field{\*\fldinst{HYPERLINK "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\\\n')"}}{\fldrslt{https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\ul0\cf0}}}}\f0\fs22 >"\par
\par
kubectl get nodes\par
\par
kubectl get pods --all-namespaces\par
\par
\par
# Get token\par
\par
kubeadm token create --print-join-command\par
\par
=========In Master Node End====================\par
\par
\par
Add Worker Machines to Kubernates Master\par
=========================================\par
\par
Copy kubeadm join token from and execute in Worker Nodes to join to cluster\par
\par
\par
\par
kubectl commonds has to be executed in master machine.\par
\par
Check Nodes\par
=============\par
\par
kubectl get nodes\par
\par
\par
Deploy Sample Application\par
==========================\par
\par
kubectl run nginx-demo --image=nginx --port=80\par
\par
kubectl expose deployment nginx-demo --port=80 --type=NodePort\par
\par
\par
Get Node Port details\par
=====================\par
kubectl get services\par
\cf1\b\fs32 Install Jenkins Server in Linux - \cf0\b0\fs22 Login as a root user\par
sudo su -\par
\par
Install Jenkins\par
\par
cd /opt/\par
\par
wget -O /etc/yum.repos.d/jenkins.repo {{\field{\*\fldinst{HYPERLINK https://pkg.jenkins.io/redhat-stable/jenkins.repo }}{\fldrslt{https://pkg.jenkins.io/redhat-stable/jenkins.repo\ul0\cf0}}}}\f0\fs22\par
\par
sudo rpm --import {{\field{\*\fldinst{HYPERLINK https://pkg.jenkins.io/redhat-stable/jenkins.io.key }}{\fldrslt{https://pkg.jenkins.io/redhat-stable/jenkins.io.key\ul0\cf0}}}}\f0\fs22\par
\par
yum install jenkins -y\par
\cf1\b\fs32 Install Maven Build Tool in Linux Server - \par
\cf0\b0\fs22 Install Maven Build Tool in Linux Server/ Set Class path for Maven Build Tool in Linux Server\par
-------------------------------------------------------------------------------------------------------------------------\par
\par
Pre Requisite Software\par
-----------------------------\par
Java is the Pre - Requisite Software for Maven.\par
\par
java -version\par
\par
Install Maven\par
------------------\par
Step1) Login as a root user and change the directory to /opt/\par
\par
sudo su -\par
cd /opt/\par
\par
Step2) Download the Maven Software\par
\par
wget {{\field{\*\fldinst{HYPERLINK http://apachemirror.wuchna.com/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.zip }}{\fldrslt{http://apachemirror.wuchna.com/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.zip\ul0\cf0}}}}\f0\fs22\par
\par
Step3) Set the class path/Environmental Variable\par
\par
For Specific User\par
----------------------\par
vi ~/.bash_profile\par
\par
export M2_HOME=/opt/apache-maven-3.6.2\par
\par
export PATH=$PATH:$M2_HOME/bin\par
\par
source ~/.bash_profile\par
\par
For All Users\par
---------------------- \par
vi /etc/profile\par
export M2_HOME=/opt/apache-maven-3.6.2\par
export PATH = $PATH:$M2_HOME/bin\par
\par
source /etc/profile\par
\par
Step4) Check the Maven version\par
\par
mvn -version\par
\par
\par
\cf1\b\fs32 AWS Password Login - Configuration - \cf0\b0\fs22\par
Enable a password login instead of pem file when logging into EC2 Instance using SSH\par
================================================================\par
\par
Procedure to Enable the password login\par
---------------------------------------------------\par
Step 1) First login into ec2 instance with pem file, then switch to root user.\par
ssh -i "mithuntechnologies.pem" ec2-user@ec2-52-66-196-244.ap-south-1.compute.amazonaws.com\par
\par
sudo su - (OR) sudo -i\par
\par
Step 2) Set a password for ec2-user as follows.\par
       \par
passwd ec2-user\par
       \par
Step 3) Update the PasswordAuthentication parameter in the /etc/ssh/sshd_config file as follows.\par
       \par
vi /etc/ssh/sshd_config\par
       \par
PasswordAuthentication yes\par
\par
Step 4) Restart the sshd service as follows.\par
\par
service sshd restart\par
\par
\par
\cf1\b\fs32 Nexus Server Installation in Linux \cf0\b0\fs22 - \par
\par
Login as a root user\par
sudo su -\par
cd /opt\par
yum install tar wget -y\par
wget {{\field{\*\fldinst{HYPERLINK http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz }}{\fldrslt{http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz\ul0\cf0}}}}\f0\fs22\par
tar -zxvf nexus-3.15.2-01-unix.tar.gz\par
mv /opt/nexus-3.15.2-01 /opt/nexus\par
\par
#As a good security practice, Nexus is not advised to run nexus service as a root user, so create a new user called nexus and grant sudo access to manage nexus services as follows.\par
 \par
useradd nexus\par
\par
#Give the sudo access to nexus user\par
\par
visudo\par
nexus ALL=(ALL) NOPASSWD: ALL\par
\par
#Change the owner and group permissions to /opt/nexus and /opt/sonatype-work directories.\par
\par
chown -R nexus:nexus /opt/nexus\par
chown -R nexus:nexus /opt/sonatype-work\par
chmod -R 775 /opt/nexus\par
chmod -R 775 /opt/sonatype-work\par
\par
#Open /opt/nexus/bin/nexus.rc file and  uncomment run_as_user parameter and set as nexus user.\par
\par
vi /opt/nexus/bin/nexus.rc\par
run_as_user="nexus"\par
\par
#Create nexus as a service\par
\par
ln -s /opt/nexus/bin/nexus /etc/init.d/nexus\par
\par
#Switch as a nexus user and start the nexus service as follows.\par
\par
su - nexus\par
\par
#Enable the nexus services\par
sudo systemctl enable nexus\par
\par
#Start the nexus service\par
sudo systemctl start nexus\par
\par
Troubleshooting\par
---------------------\par
nexus service is not starting?\par
\par
a)make sure need to change the ownership and group to /opt/nexus and /opt/sonatype-work directories and permissions (775) for nexus user.\par
b)make sure you are trying to start nexus service with nexus user.\par
c)check java is installed or not using java -version command.\par
d) check the nexus.log file which is availabe in  /opt/sonatype-work/nexus3/log  directory.\par
\par
Unable to access nexus URL?\par
-------------------------------------\par
a)make sure port 8081 is opened in security groups in AWS ec2 instance.\par
\par
\cf1\b\fs32 Configuration of NFS Server -                                                           Configuration of NFS Server\par
\cf0\b0\fs22\par
Step 1: Install NFS Kernel Server\par
Before installing the NFS Kernel server, we need to update our system\rquote s repository index with that of the Internet through the following apt command as sudo:\par
\par
$ sudo apt-get update\par
\par
The above command lets us install the latest available version of a software through the Ubuntu repositories.\par
\par
Now, run the following command in order to install the NFS Kernel Server on your system:\par
\par
$ sudo apt install nfs-kernel-server\par
\par
Step 2: Create the Export Directory\par
\par
sudo mkdir -p /mnt/share/\par
\par
# As we want all clients to access the directory, we will remove restrictive permissions.\par
sudo chown nobody:nogroup /mnt/share/\par
sudo chmod 777 /mnt/share/\par
\par
Step 3: Assign server access to client(s) through NFS export file\par
\par
sudo vi /etc/exports\par
\par
\par
#/mnt/share/ <clientIP or Clients CIDR>(rw,sync,no_subtree_check,no_root_squash)\par
 #Ex:\par
/mnt/share/ *(rw,sync,no_subtree_check,no_root_squash)\par
\par
\par
Step 4: Export the shared directory\par
\par
$ sudo exportfs -a\par
\par
\par
sudo systemctl restart nfs-kernel-server\par
\par
Step 5: Open firewall for the client (s) PORT 2049\par
\par
\par
Configuring the Client Machine\par
\par
\par
Step 1: Install NFS Common\par
Before installing the NFS Common application, we need to update our system\rquote s repository index with that of the Internet through the following apt command as sudo:\par
\par
$ sudo apt-get update\par
\par
\par
$ sudo apt-get install nfs-common\par
\par
\par
# Test if we can mount nfs path with client systems folder.\par
\par
Step 2: Create a mount point for the NFS host\rquote s shared folder\par
\par
sudo mkdir -p /mnt/sharedfolder_client\par
\par
Step 3: Mount the shared directory on the client\par
\par
sudo mount serverIP:/mnt/share/ /mnt/mountfolder_client\par
\par
\cf1\b\fs28 Install Maven Build Tool in MAC \par
Install Maven Build Tool in MAC Book / Set Class path for Maven Build Tool in MAC Book\cf0\b0\fs22\par
---------------------------------------------------------------------------------------------------------------------\par
\par
Pre Requisite Software\par
-----------------------------\par
Java is the Pre Requisite Software for Maven.\par
\par
java -version\par
\par
\par
Install Maven\par
------------------\par
Download the Maven Software using below url.\par
{{\field{\*\fldinst{HYPERLINK https://maven.apache.org/download.cgi }}{\fldrslt{https://maven.apache.org/download.cgi\ul0\cf0}}}}\f0\fs22\par
\par
Set the class path/Environmental Variable\par
vi ~/.bash_profile\par
\par
export M2_HOME=/Users/mithunreddy/MithunTechnologies/Softwares/Running/apache-maven-3.6.2\par
\par
export PATH=$PATH:$M2_HOME/bin\par
\par
source ~/.bash_profile\par
\par
Check the Maven version\par
mvn -version\par
\cf1\b\fs32 Docker Swarm Setup -    Docker Swarm Setup\par
\cf0\b0\fs22                                                        ================\par
Rerequisites:\par
============\par
3 - Ubuntu Servers\par
     1 - Master\par
    2 - Workers\par
   \par
Steps:\par
=====\par
1) Install Docker Community Edition in all the 3 Servers.\par
   And add user(ubuntu) to docker group.\par
                \par
   # Below command works for most of the Linux flavors except Redhat Linux\par
   sudo curl -fsSL get.docker.com | /bin/bash\par
  \par
   # Add Current User to docker group.\par
   sudo usermod -aG docker $\{USER\}\par
  \par
2) Open below ports in AWS Security Groups.\par
      \par
    TCP port 2377 for cluster management communications\par
    TCP and UDP port 7946 for communication among nodes\par
    UDP port 4789 for overlay network traffic.\par
   \par
    If you are planning on creating an overlay network with encryption     (--opt encrypted), you will  also need     to ensure ip protocol 50 (ESP) traffic is allowed.\par
     \par
3) Execute below command to initiate docker swarm manager in one system.\par
  \par
   # Initialize docker swarm cluster.\par
   docker swarm init\par
  \par
   # Get worker token\par
   docker swarm join-token worker\par
  \par
   # Get manager token to add another node as secondary manager\par
   docker swarm join-token manager\par
  \par
4) Add workers machines to cluster.\par
   #Execute join token(worker token from manager) in all worker machines.\par
  \par
  \par
5) Display docker cluster nodes in manager machine.\par
\par
   docker node ls\par
  \par
6) Deploy Sample Docker Application in docker swarm cluster.\par
\par
    docker service create --name webserver --replicas 2 -p 80:80 httpd     \par
  \par
\cf1\b\fs32 SonarQube Server Integration with Jenkins \par
\cf0\b0\fs22 Pre Requisite:\par
\par
SonarQuber Server\par
Jenkins Server\par
\par
Step 1) Install "SonarQube Scanner"  plugin in Jenkins as follow.\par
\par
 \par
Step 2) Integrate SonarQube server with Jenkins  as follows.\par
\par
\par
Manage Jenkins ---> Configure System ---> SonarQube servers\par
\par
Generate the SonarQube server authentication token \par
 \par
Login into SonarQube with Admin user.\par
{{\field{\*\fldinst{HYPERLINK http://<<IP }}{\fldrslt{http://<<IP\ul0\cf0}}}}\f0\fs22  Address>>:9000/\par
Default Credentials:\par
User: admin\par
Password: admin\par
\par
Click on Administration tab.\par
\par
\par
\par
\par
\par
Click on Tokens\par
\par
Step3) Execute the SonarQube report for Maven Java Project.\par
\par
Select the job , to which we need to run the sonarqube report, click on configure, in Post-build Actions options, click on Add post-build action --> Select the SonarQube report for Maven project.\par
\cf1\b\fs32 Install Ansible in AWS EC2 Redhat Server - Ansible Installation\par
\cf0\b0\fs22\par
1) Create RedHat 3 Servers (1-AnsibleServer , 2- Host Machines for demo) in AWS.\par
\par
2) Create Ansible User and provide sudo access in all Servers.\par
\par
    2.1) Create the user ansible and set the password on all hosts:\par
           sudo useradd ansible\par
           sudo passwd ansible\par
     \par
    2.2) Make the necessary entry in sudoers file /etc/sudoersfor ansible        \par
           user for password-less sudo access:\par
        \par
           ansible ALL=(ALL) NOPASSWD: ALL\par
\par
           visudo\par
\par
    2.3) Make the necessary changes  in sshd_config file /etc/ssh/sshd_config    \par
           to enable password based authentication.\par
\par
         Un comment PasswordAuthentication yes\par
         and comment  PasswordAuthentication no.\par
         And save the file .\par
\par
            vi /etc/ssh/sshd_config\par
\par
     2.4)    Then restart sshd service.\par
                sudo service sshd restart\par
\par
=============================================================================\par
               Install Ansible in Red hat (Ansible Server)\par
=============================================================================\par
\par
1)     SSH to Redhat System & Switch to ansible user\par
       sudo su ansible\par
      \par
2)     Install python\par
       sudo yum install python3 -y\par
      \par
3)    Update python alaternatives\par
       sudo alternatives --set python /usr/bin/python3\par
      \par
4)    Verify Python Version\par
         python --version\par
 \par
5)    Install PIP\par
       sudo yum -y install python3-pip\par
      \par
6)    Install ansible using PIP\par
       pip3 install ansible --user\par
      \par
7)    Verify Ansible version\par
       ansible --version\par
      \par
8)    Create ansible folder under /etc\par
       sudo mkdir /etc/ansible\par
      \par
9)    create ansible.cfg file under /etc/ansible ., and paste complete content from below git link.\par
      {{\field{\*\fldinst{HYPERLINK https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg }}{\fldrslt{https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg\ul0\cf0}}}}\f0\fs22\par
  \par
       sudo vi  /etc/ansible/ansible.cfg\par
\par
10)   Create hosts file under /etc/ansible.\par
        Sample content can found in below git link.\par
        {{\field{\*\fldinst{HYPERLINK https://raw.githubusercontent.com/ansible/ansible/devel/examples/hosts }}{\fldrslt{https://raw.githubusercontent.com/ansible/ansible/devel/examples/hosts\ul0\cf0}}}}\f0\fs22\par
 \par
       sudo vi  /etc/ansible/hosts\par
\par
//Optional Step\par
11) Install sshpass in Ansible server if you want to cofigure host machines with username and  \par
      password.\par
\par
    sudo wget {{\field{\*\fldinst{HYPERLINK http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm }}{\fldrslt{http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\ul0\cf0}}}}\f0\fs22\par
    sudo rpm -ivh epel-release-6-8.noarch.rpm\par
    sudo yum --enablerepo=epel -y install sshpass\par
\cf1\b\fs28 PUSH/PULL Docker Image form Private Repository (Nexus) \cf0\b0\fs22 - PUSH/PULL Docker Image form Private Repository (Nexus)\par
Pre-Requisities:\par
Server 1: Ubuntu                                         Server 2: Ubuntu\par
Install the below softwares in Server1          Install the below softwares in Server2\par
Java 8                                                              Docker\par
\par
Docker\par
\par
Jenkins\par
\par
Maven/Gradle\par
Server 1:\par
1   We are going to build our project using maven/gradle\par
2   Through docker file we are going to create an docker image for that project\par
3   We are going to push the docker image to Nexus (docker hosted) repo\par
Server 2:\par
1  We are going to pull the docker image form Nexus (docker hosted) repo\par
2   Create a container using the docker image\par
Nexus Repository (docker hosted,proxy) Creation:\par
docker hosted:   \par
1) Login to your Nexus repository.\par
2) Create docker hosted\par
\par
\par
 \par
 Here give a name to the repo (dock-hosted), then we are going to assign a port to this docker hosted repo. Through this port we are going to access this repo. (Note: you should not give 8081 because it is already assigned to Nexus Repo, so use different port number)\par
\par
In this case I have assigned 8083 for this repo.\par
\par
3) Keep the remaining settings as it is and create repository\par
\par
 Note: Open 8083 in AWS Security Groups.\par
Ubuntu Configuration : Server 1 & 2\par
Do these steps in both the servers in order to push and pull docker images from Nexus Repo.\par
1.     Login as root user\par
2.     Go to /etc/docker\par
            cd /etc/docker\par
3.     Then create a file called daemon.json\par
vi /etc/docker/daemon.json\par
4.     Write these script in daemon.json\par
\par
\{\par
  "insecure-registries": [ "13.234.21.143:8083" ]\par
\}\par
\par
(Here we are allowing our docker daemon to access the Nexus Hosted Repo)\par
5.     Save the file\par
6.     Restart docker service using below command.\par
            systemctl restart docker\par
\par
 \par
Server 1: Login,Build & Push\par
1 Login to Nexus repo\par
docker login \f1\endash u admin \endash p password 13.234.21.143:8083\par
(or)\par
docker login 13.234.21.143:8083\par
\par
\par
\par
\par
2  Build an image using below command.\par
docker build \endash t 13.234.21.143:8083/image1 .\par
           \par
(here while building an docker image we will use ip address with port for the docked hosted repo instead of username in hub.docker.com)\par
3 Push docker image to Nexus Repo\par
Server 2: Pull image/Run container\par
1.     Login to Nexus\par
2   Pull docker image\par
3  Build a container\par
docker run \endash d \endash p 8090:8080 \endash p 9990:9990 - -name wildfly 13.234.21.143:8083/image1\par
(I am using wildfly to deploy)     \par
}
 